X  <- t(x - mean)
conc <- pd.solve(varcov, log.det=TRUE)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
}
dmnorm(x=c(10^330,10^330),mean=mu3[[N]],varcov=Sig3[[N]])
dim(x)
dim(c(10^330,10^330))
dmnorm <- function(x, mean=rep(0,d), varcov, log=FALSE)
{
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(ncol(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (ncol(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- t(x - mean)
conc <- pd.solve(varcov, log.det=TRUE)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
}
dmnorm(x=matrix(c(10^330,10^330),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
mu3[[N]]
Sig3[[N]]
matrix(c(10^330,10^330),ncol=1)
dmnorm <- function(x, mean=rep(0,d), varcov, log=FALSE)
{
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(ncol(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- t(x - mean)
conc <- pd.solve(varcov, log.det=TRUE)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
}
dmnorm(x=matrix(c(10^330,10^330),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
dmnorm <- function(x, mean=rep(0,d), varcov, log=FALSE)
{
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- t(x - mean)
conc <- pd.solve(varcov, log.det=TRUE)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
}
dmnorm(x=matrix(c(10^330,10^330),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
dmnorm <- function(x, mean=rep(0,d), varcov, log=FALSE)
{
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- t(x - mean)
conc <- solve(varcov)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
}
dmnorm(x=matrix(c(10^330,10^330),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
x=matrix(c(10^330,10^330),ncol=1);mean=mu3[[N]];varcov=Sig3[[N]]
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- t(x - mean)
conc <- solve(varcov)
dim(X)
X
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- (x - mean)
conc <- solve(varcov)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
if(log) logPDF else exp(logPDF)
log
dmnorm <- function(x, mean=rep(0,d), varcov)
{
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- (x - mean)
conc <- solve(varcov)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
return(exp(logPDF))
}
x=matrix(c(10^330,10^330),ncol=1);mean=mu3[[N]];varcov=Sig3[[N]]
dmnorm(x=matrix(c(10^330,10^330),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- (x - mean)
conc <- solve(varcov)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
logPDF
Q
conc
pi
d
dmnorm(x=matrix(c(0,0),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
x=matrix(c(0,0),ncol=1);mean=mu3[[N]];varcov=Sig3[[N]]
d <- if(is.matrix(varcov)) ncol(varcov) else 1
if(d==1) return(dnorm(x, mean, sqrt(varcov), log=log))
x <- if (is.vector(x)) t(matrix(x)) else data.matrix(x)
if(nrow(x) != d) stop("mismatch of dimensions of 'x' and 'varcov'")
if(is.matrix(mean)) { if ((nrow(x) != nrow(mean)) || (nrow(mean) != d))
stop("mismatch of dimensions of 'x' and 'mean'") }
if(is.vector(mean)) mean <- outer(rep(1, nrow(x)), as.vector(matrix(mean,d)))
X  <- (x - mean)
conc <- solve(varcov)
Q <- colSums((conc %*% X)* X)
log.det <- attr(conc, "log.det")
logPDF <- as.vector(Q + d*logb(2*pi) + log.det)/(-2)
d
x
X
conc
Q
log.det
logPDF
pi
help(det)
dmnorm <- function(x,mu,sigma){
# x and mu are k by 1
k <- length(x)
x <- matrix(x,ncol=1)
mu <- matrix(mu,ncol=1)
logPDF <- -(k/2)*log(2*pi) - 0.5*log(det(sigma)) - 0.5*t(x-mu)%*%solve(sigma)%*%(x-mu)
return(exp(logPDF))
}
dmnorm(x=matrix(c(0,0),ncol=1),mean=mu3[[N]],varcov=Sig3[[N]])
dmnorm(x=matrix(c(0,0),ncol=1),mu=mu3[[N]],sigma=Sig3[[N]])
dmnorm(x=matrix(c(-0.9,1),ncol=1),mu=mu3[[N]],sigma=Sig3[[N]])
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
for (i in 1:N){
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmvnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-Inf,-Inf),upperLimit=c(Inf,Inf))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
y <- auxdat$lnwage
xxmat <- cbind(rep(1,length(auxdat$yrsch)),auxdat$yrsch, auxdat$poexp, auxdat$poexp2)
A<- rbind(eye(7),-eye(7))
B<- c(-c(rep(-10,6),0.0000001),c(rep(10,6),2))
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
dmnorm
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
for (i in 1:N){
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-Inf,-Inf),upperLimit=c(Inf,Inf))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
y <- auxdat$lnwage
xxmat <- cbind(rep(1,length(auxdat$yrsch)),auxdat$yrsch, auxdat$poexp, auxdat$poexp2)
A<- rbind(eye(7),-eye(7))
B<- c(-c(rep(-10,6),0.0000001),c(rep(10,6),2))
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
for (i in 1:N){
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
y <- auxdat$lnwage
xxmat <- cbind(rep(1,length(auxdat$yrsch)),auxdat$yrsch, auxdat$poexp, auxdat$poexp2)
A<- rbind(eye(7),-eye(7))
B<- c(-c(rep(-10,6),0.0000001),c(rep(10,6),2))
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
param=iniparam;y=y;xxmat=xxmat;mu3=mu3;Sig3=Sig3;N=N
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
i<-1
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
proc.time()-ptm
logLi[1]
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-1000,-1000),upperLimit=c(1000,1000))$integral
proc.time()-ptm
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-1000,-1000),upperLimit=c(1000,1000))$integral
proc.time()-ptm
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-1000,-1000),upperLimit=c(1000,1000))$integral
proc.time()-ptm
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-1000,-1000),upperLimit=c(1000,1000))$integral
proc.time()-ptm
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-1000,-1000),upperLimit=c(1000,1000))$integral
proc.time()-ptm
logLi[i]
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
proc.time()-ptm
logLi[io]
logLi[i]
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-10,-10),upperLimit=c(10,10))$integral
proc.time()-ptm
logLi[1]
for (i in 1:N){
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
proc.time()-ptm
}
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
proc.time()-ptm
logLi[1]
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-300,-300),upperLimit=c(300,300))$integral
proc.time()-ptm
logLi[1]
ptm <- proc.time()
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-500,-500),upperLimit=c(500,500))$integral
proc.time()-ptm
logLi[1]
for (i in 1:N){
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
logLi[i] <- adaptIntegrate(fun1,resi=resi,lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
summary(logLi)
ptm <- proc.time()
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
proc.time() - ptm
549/60
0.21*3000
res <- as.vector(y - xxmat%*%bet)
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
res[1:10]
i<-1
resi <- as.vector(y[((i-1)*T+1):(i*T)] - xxmat[((i-1)*T+1):(i*T),]%*%bet) ### individual i's observation
resi
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
res <- as.vector(y - xxmat%*%bet)
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
ptm <- proc.time()
for (i in 1:N){
logLi[i] <- adaptIntegrate(fun1,resi=as.vector(resi[((i-1)*T+1):(i*T)]),lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
proc.time()-ptm
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
res <- as.vector(y - xxmat%*%bet)
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
for (i in 1:N){
logLi[i] <- adaptIntegrate(fun1,resi=as.vector(resi[((i-1)*T+1):(i*T)]),lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
y <- auxdat$lnwage
xxmat <- cbind(rep(1,length(auxdat$yrsch)),auxdat$yrsch, auxdat$poexp, auxdat$poexp2)
A<- rbind(eye(7),-eye(7))
B<- c(-c(rep(-10,6),0.0000001),c(rep(10,6),2))
ptm <- proc.time()
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
proc.time() - ptm
ncore <- detectCores()
ptm   <- proc.time()
cl<-makeCluster(ncore-1)
setDefaultCluster(cl)
clusterExport(cl,varlist=list("iniparam","y","xxmat","mu3","Sig3","N"),envir=globalenv())
clusterEvalQ(cl, {
library(MASS)
library(dplyr)
library(stats)
library(pracma)
library(mvtnorm)
library(cubature)
})
oout <- optimParallel(par=iniparam,fn=MLEObjDoubleLatent,y=y,xxmat=xxmat,mu3=mu3,
Sig3=Sig3,N=N,lower=c(rep(-10,6),0.000001),upper=c(rep(10,6),2))
setDefaultCluster(cl=NULL)
stopCluster(cl)
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
res <- as.vector(y - xxmat%*%bet)
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
for (i in 1:N){
logLi[i] <- adaptIntegrate(fun1,resi=as.vector(res[((i-1)*T+1):(i*T)]),lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
y <- auxdat$lnwage
xxmat <- cbind(rep(1,length(auxdat$yrsch)),auxdat$yrsch, auxdat$poexp, auxdat$poexp2)
A<- rbind(eye(7),-eye(7))
B<- c(-c(rep(-10,6),0.0000001),c(rep(10,6),2))
#ptm <- proc.time()
#MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
#proc.time() - ptm
ncore <- detectCores()
ptm   <- proc.time()
cl<-makeCluster(ncore-1)
setDefaultCluster(cl)
clusterExport(cl,varlist=list("iniparam","y","xxmat","mu3","Sig3","N"),envir=globalenv())
clusterEvalQ(cl, {
library(MASS)
library(dplyr)
library(stats)
library(pracma)
library(mvtnorm)
library(cubature)
})
oout <- optimParallel(par=iniparam,fn=MLEObjDoubleLatent,y=y,xxmat=xxmat,mu3=mu3,
Sig3=Sig3,N=N,lower=c(rep(-10,6),0.000001),upper=c(rep(10,6),2))
setDefaultCluster(cl=NULL)
stopCluster(cl)
help(clusterExport)
dmnorm
ncore <- detectCores()
ptm   <- proc.time()
cl<-makeCluster(ncore-1)
setDefaultCluster(cl)
clusterExport(cl,varlist=list("iniparam","y","xxmat","mu3","Sig3","N","dmnorm"),envir=globalenv())
clusterEvalQ(cl, {
library(MASS)
library(dplyr)
library(stats)
library(pracma)
library(mvtnorm)
library(cubature)
})
oout <- optimParallel(par=iniparam,fn=MLEObjDoubleLatent,y=y,xxmat=xxmat,mu3=mu3,
Sig3=Sig3,N=N,lower=c(rep(-10,6),0.000001),upper=c(rep(10,6),2))
setDefaultCluster(cl=NULL)
stopCluster(cl)
ncore <- detectCores()
ptm   <- proc.time()
cl<-makeCluster(ncore-1)
setDefaultCluster(cl)
clusterExport(cl,varlist=list("iniparam","y","xxmat","mu3","Sig3","N","dmnorm"),envir=globalenv())
clusterEvalQ(cl, {
library(MASS)
library(dplyr)
library(stats)
library(pracma)
library(mvtnorm)
library(cubature)
})
oout <- optimParallel(par=iniparam,fn=MLEObjDoubleLatent,y=y,xxmat=xxmat,mu3=mu3,
Sig3=Sig3,N=N,lower=c(rep(-10,6),0.000001),upper=c(rep(10,6),2))
setDefaultCluster(cl=NULL)
stopCluster(cl)
proc.time()-ptm
38370/3600
oout
oout$par
iniparam
ptm <- proc.time()
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
proc.time() - ptm
### likelihood function for NLSY79 estimation
MLEObjDoubleLatent <- function(param,y,xxmat,mu3,Sig3,N){
l  <- dim(xxmat)[2]
ss <- abs(param[(l+3)]) ## SD
bet  <- param[1:l]
bet2 <- param[(l+1):(l+2)]
logLi <- rep(NA,N)
### construct likelihood given beta
res <- as.vector(y - xxmat%*%bet)
fun1 <- function(logtheta,resi)  sum(log(pmax(dnorm(resi-bet2[1]*rep(logtheta[1],T)-bet2[2]*rep(logtheta[2],T),mean=0,sd=ss),.Machine$double.eps)),na.rm=TRUE)*dmnorm(x=matrix(c(logtheta[1],logtheta[2]),ncol=1),mu=mu3[[i]],sigma=Sig3[[i]])
for (i in 1:N){
logLi[i] <- adaptIntegrate(fun1,resi=as.vector(res[((i-1)*T+1):(i*T)]),lowerLimit=c(-100,-100),upperLimit=c(100,100))$integral
}
avll <- mean(logLi,na.rm=TRUE)
return(-avll)
}
ptm <- proc.time()
MLEObjDoubleLatent(param=iniparam,y=y,xxmat=xxmat,mu3=mu3,Sig3=Sig3,N=N)
proc.time() - ptm
load("C:/Users/yhwang18/Dropbox/도큐멘트/AntiAsian Racism/Data/Pilot Survey/data/DistParam.RData")
load("C:/Users/yhwang18/Dropbox/도큐멘트/AntiAsian Racism/Data/Pilot Survey/data/DistParam.RData")
library("remotes")
install_github("jyypma/ipoptr")
.libPaths()
.libPaths("C:\msys64\mingw64\include\coin-or")
.libPaths("C:/msys64/mingw64/include/coin-or")
.libPaths()
library("remotes")
.libPaths(list(.libPaths(),"C:/msys64/mingw64/include/coin-or"))
.libPaths()
list(.libPaths(),"C:/msys64/mingw64/include/coin-or")
library("remotes")
.libPaths(c(.libPaths(),"C:/msys64/mingw64/include/coin-or"))
install_github("jyypma/ipoptr")
.libPaths()
.libPaths()
install_github("jyypma/ipoptr")
setwd("C:/Users/yhwang18/Dropbox/Document/GitHub/factormodel")
library(devtools)
devtools::check()
devtools::install()
